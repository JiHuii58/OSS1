package com.example.webapphkh.services;

import com.example.webapphkh.models.Lesson;
import com.example.webapphkh.repositories.LessonRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class LessonService {

    @Autowired
    private LessonRepository lessonRepository;

    private static final Logger logger = LoggerFactory.getLogger(LessonService.class);

    public List<Lesson> getAllLessons() {
        try {
            logger.info("üì• API getAllLessons() ƒë∆∞·ª£c g·ªçi!");
            List<Lesson> lessons = lessonRepository.findAll();
            logger.info("‚úÖ S·ªë l∆∞·ª£ng b√†i h·ªçc l·∫•y v·ªÅ: {}", lessons.size());
            return lessons;
        } catch (Exception e) {
            logger.error("‚ùå L·ªói khi l·∫•y danh s√°ch b√†i h·ªçc: ", e);
            throw new RuntimeException("L·ªói server: " + e.getMessage());
        }
    }

    public Optional<Lesson> getLessonById(Long id) {
        try {
            logger.info("üì• API getLessonById({}) ƒë∆∞·ª£c g·ªçi!", id);
            return lessonRepository.findById(id);  // Tr·∫£ v·ªÅ Optional<Lesson>
        } catch (Exception e) {
            logger.error("‚ùå L·ªói khi l·∫•y b√†i h·ªçc theo ID: ", e);
            throw new RuntimeException("L·ªói server: " + e.getMessage());
        }
    }
    

    public List<Lesson> getLessonsByLevel(String level) {
        try {
            logger.info("üì• API getLessonsByLevel({}) ƒë∆∞·ª£c g·ªçi!", level);
            List<Lesson> lessons = lessonRepository.findByLevel(level);
            logger.info("‚úÖ S·ªë b√†i h·ªçc ·ªü level {}: {}", level, lessons.size());
            return lessons;
        } catch (Exception e) {
            logger.error("‚ùå L·ªói khi l·∫•y b√†i h·ªçc theo level: ", e);
            throw new RuntimeException("L·ªói server: " + e.getMessage());
        }
    }

    public List<Lesson> getLessonsByTopic(String topic) {
        try {
            logger.info("üì• API getLessonsByTopic({}) ƒë∆∞·ª£c g·ªçi!", topic);
            List<Lesson> lessons = lessonRepository.findByTopic(topic);
            logger.info("‚úÖ S·ªë b√†i h·ªçc c√≥ topic {}: {}", topic, lessons.size());
            return lessons;
        } catch (Exception e) {
            logger.error("‚ùå L·ªói khi l·∫•y b√†i h·ªçc theo topic: ", e);
            throw new RuntimeException("L·ªói server: " + e.getMessage());
        }
    }

    public ResponseEntity<String> addLesson(Lesson lesson) {
        try {
            logger.info("üì• API addLesson() ƒë∆∞·ª£c g·ªçi!");
            logger.info("üìå Th√™m b√†i h·ªçc: {}", lesson.getTitle());
            lessonRepository.save(lesson);
            logger.info("‚úÖ B√†i h·ªçc ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!");
            return ResponseEntity.ok("B√†i h·ªçc ƒë√£ ƒë∆∞·ª£c th√™m!");
        } catch (Exception e) {
            logger.error("‚ùå L·ªói khi th√™m b√†i h·ªçc: ", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("L·ªói server: " + e.getMessage());
        }
    }

    public ResponseEntity<String> updateLesson(Long id, Lesson updatedLesson) {
        try {
            logger.info("üì• API updateLesson({}, {}) ƒë∆∞·ª£c g·ªçi!", id, updatedLesson.getTitle());
            Optional<Lesson> lessonOpt = lessonRepository.findById(id);
            if (lessonOpt.isPresent()) {
                Lesson lesson = lessonOpt.get();
                lesson.setTitle(updatedLesson.getTitle());
                lesson.setTopic(updatedLesson.getTopic());
                lesson.setLevel(updatedLesson.getLevel());
                lesson.setContent(updatedLesson.getContent());
                lesson.setAudioUrl(updatedLesson.getAudioUrl());
                lessonRepository.save(lesson);
                logger.info("‚úÖ B√†i h·ªçc ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!");
                return ResponseEntity.ok("B√†i h·ªçc ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");
            } else {
                logger.warn("‚ö† Kh√¥ng t√¨m th·∫•y b√†i h·ªçc v·ªõi ID: {}", id);
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Kh√¥ng t√¨m th·∫•y b√†i h·ªçc!");
            }
        } catch (Exception e) {
            logger.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t b√†i h·ªçc: ", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("L·ªói server: " + e.getMessage());
        }
    }

    public ResponseEntity<String> deleteLesson(Long id) {
        try {
            logger.info("üì• API deleteLesson({}) ƒë∆∞·ª£c g·ªçi!", id);
            if (lessonRepository.existsById(id)) {
                lessonRepository.deleteById(id);
                logger.info("‚úÖ B√†i h·ªçc ƒë√£ b·ªã x√≥a th√†nh c√¥ng!");
                return ResponseEntity.ok("X√≥a b√†i h·ªçc th√†nh c√¥ng!");
            } else {
                logger.warn("‚ö† Kh√¥ng t√¨m th·∫•y b√†i h·ªçc v·ªõi ID: {}", id);
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Kh√¥ng t√¨m th·∫•y b√†i h·ªçc!");
            }
        } catch (Exception e) {
            logger.error("‚ùå L·ªói khi x√≥a b√†i h·ªçc: ", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("L·ªói server: " + e.getMessage());
        }



        
    }
}
